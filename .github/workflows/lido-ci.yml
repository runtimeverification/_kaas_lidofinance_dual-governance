---
  name: 'Proof Runner'
  on:
    workflow_dispatch:
      inputs:
        branch_name:
          description: 'Branch Name of Clients code to Clone'
          required: true
        org:
          description: 'Organization to Clone Code from'
          required: true
        repository:
          description: 'Repository to Clone Code from'
          required: true
        kaas_org:
          description: 'KaaS Organization to store kcfg cache results to'
          required: true
        kaas_vault:
          description: 'KaaS Vault to store kcfg cache results to'
          required: true
        cache:
          description: 'Skip Cache Upload and Download'
          required: false
          default: 'true'
        mode:
          description: 'Set KaaS run mode'
          required: false
          default: 'container'
        notify:
          description: 'Report Statuses back to Commit Sha'
          required: false
          default: 'false'
        commit_sha:
          description: 'Commit Sha to report statuses back to'
          required: false
          default: ''
  
  # Stop in progress workflows on the same branch and same workflow to use latest committed code
  concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event.inputs.branch_name }}
    cancel-in-progress: false
  
  jobs:
    test-proofs:
      name: 'Test Proofs'
      runs-on: [self-hosted, linux, kaas]
      steps:
        - name: "Install Node"
          uses: actions/setup-node@v4
          with:
            node-version: '20'

        - name: 'Check out code'
          uses: actions/checkout@v4
          with:
            token: ${{ secrets.JENKINS_GITHUB_PAT }}
            fetch-depth: 0

        # Add this section to cehckout the client code. UPDATE the fields to match the client repository/org information -- Ideally client code is setup as a fork of the original repsoitory
        - name: Generate an App Token
          id: generate-token
          uses: actions/create-github-app-token@v1.11.0
          with:
            app-id: ${{ secrets.KAAS_APP_ID }}
            private-key: ${{ secrets.KAAS_APP_SSH_PRV_KEY }}
            owner: ${{ github.event.inputs.org }}

        - name: Report Pending Status
          run: |
            curl -L -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ steps.generate-token.outputs.token }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/${{ github.event.inputs.org }}/${{ github.event.inputs.repository }}/statuses/${{ github.event.inputs.commit_sha }}" \
              -d '{
                "state": "pending",
                "target_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                "description": "Proofs Pending",
                "context": "runtimeverification/_kaas_lidofinance_dual-governance"
              }'

        - name: Checkout CLIENT Code
          uses: actions/checkout@v4
          with:
            repository: '${{ github.event.inputs.org }}/${{ github.event.inputs.repository }}'
            token: ${{ steps.generate-token.outputs.token }}
            path: '${{ github.event.inputs.repository }}'
            ref: ${{ github.event.inputs.branch_name }}
            fetch-depth: 0
            submodules: 'recursive'
        
        - name: "Install KaaS"
          uses: runtimeverification/install-kaas@v0.2.1
          with:
            github-token: ${{ secrets.JENKINS_GITHUB_PAT }}

        - name: "Download KCFG Cache Results"
          if: ${{ github.event.inputs.cache == 'true' }}
          continue-on-error: true
          shell: bash
          run: |
            KONTROL_DIR =$(find . -name 'kontrol.toml' -exec dirname {} \;)
            pushd ${{ github.event.inputs.repository }}/$KONTROL_DIR > /dev/null
            # Install Test Dependencies
            tag=$(git hash-object kontrol.toml)
            kaas-cli download --token ${{ secrets.CLIENT_TOKEN }} ${{ github.event.inputs.kaas_org }}/${{ github.event.inputs.kaas_vault }}:$tag -d kout/
      
        # Some Setups Require using `pushd` to setup execution in the correct client directory
        # Some Setups require an additional step to pull all the necessary files, examples are `npm install` or `git submodule update --recursive`
        - name: Start Telemetry
          uses: catchpoint/workflow-telemetry-action@v2.0.0
          with:
            proc_trace_sys_enable: true

        - name: 'Run Kontrol'
          shell: bash
          run: |
            # Step into Runtime Folder
            pushd ${{ github.event.inputs.repository }} > /dev/null
            # Install Test Dependencies
            npm install
            # Call Kontrol Directly and using 'local' mode or container to run in docker
            export FOUNDRY_PROFILE=kontrol-properties 
            KONTROL_VERSION=$(cat test/kontrol/scripts/versions.json | jq -r '.kontrol')
            kaas-cli run -m ${{ github.event.inputs.mode }} -kv v"${KONTROL_VERSION}"

        - name: 'KaaS Cache Upload'
          if: ${{ github.event.inputs.cache == 'true' }}
          continue-on-error: true
          shell: bash
          run: |
            # Enter directory where `out` folder is generated
            KONTROL_DIR =$(find . -name 'kontrol.toml' -exec dirname {} \;)
            pushd ${{ github.event.inputs.repository }}/$KONTROL_DIR > /dev/null
            tag=$(git hash-object kontrol.toml)
            kaas-cli upload --token ${{ secrets.CLIENT_TOKEN }} ${{ github.event.inputs.kaas_org }}/${{ github.event.inputs.kaas_vault }}:$tag -d kout/

        - name: Report Pass Status
          if: success() && ${{ github.event.inputs.notify == 'true' }}
          run: |
              curl -L \
                -X POST \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer ${{ steps.generate-token.outputs.token }}" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                https://api.github.com/repos/${{ github.event.inputs.org}}/${{ github.event.inputs.repository}}/statuses/${{ github.event.inputs.commit_sha }} \
                -d '{
                  "state": "success",
                  "target_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                  "description": "Optimism Proof Execution Success",
                  "context": "runtimeverification/proof-runner"
                }'

        - name: Report Failure Status
          if: failure() && ${{ github.event.inputs.notify == 'true' }}
          run: |
              curl -L \
                -X POST \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer ${{ steps.generate-token.outputs.token }}" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                https://api.github.com/repos/${{ github.event.inputs.org}}/${{ github.event.inputs.repository}}/statuses/${{ github.event.inputs.commit_sha }} \
                -d '{
                  "state": "failure",
                  "target_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                  "description": "Proof Execution Failed",
                  "context": "runtimeverification/proof-runner"
                }'
  
        - name: Report Failure Status
          if: cancelled() && ${{ github.event.inputs.notify == 'true' }}
          run: |
              curl -L \
                -X POST \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer ${{ steps.generate-token.outputs.token }}" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                https://api.github.com/repos/${{ github.event.inputs.org}}/${{ github.event.inputs.repository}}/statuses/${{ github.event.inputs.commit_sha }} \
                -d '{
                  "state": "failure",
                  "target_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                  "description": "Cancelled",
                  "context": "runtimeverification/proof-runner"
                }'
